import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import axios from "axios";
import toast from "react-hot-toast";

// Components
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import Loading from "../components/Loading";
import BookAppointment from "../components/BookAppointment";

// Redux
import { setLoading } from "../redux/reducers/rootSlice";
import fetchData from "../helper/apiCall";

// Styles
import "../styles/doctorprofile.css";

// Configure axios base URL
axios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;

/**
 * DoctorProfile - Detailed doctor profile page
 * Displays comprehensive information about a specific doctor
 */
const DoctorProfile = () => {
  const { doctorId } = useParams();
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { loading, user } = useSelector((state) => state.root);

  const [doctor, setDoctor] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [doctorStats, setDoctorStats] = useState({
    totalAppointments: 0,
    completedAppointments: 0,
    rating: 0,
    pendingAppointments: 0,
    confirmedAppointments: 0,
    cancelledAppointments: 0,
    completionRate: 0,
    recentAppointments: [],
    monthlyAppointments: [],
  });

  const token = localStorage.getItem("token") || "";

  /**
   * Fetches detailed doctor information
   */
  const fetchDoctorDetails = async () => {
    try {
      dispatch(setLoading(true));

      // Fetch doctor details
      const doctorResponse = await fetchData(`/doctor/getdoctor/${doctorId}`);
      console.log("üîç Doctor data response:", doctorResponse);

      if (doctorResponse && doctorResponse.success) {
        setDoctor(doctorResponse.data);
      } else if (doctorResponse) {
        // Handle case where response doesn't have success flag but has data
        setDoctor(doctorResponse);
      } else {
        throw new Error("No doctor data received");
      }

      // Fetch doctor statistics (appointments, ratings, etc.)
      try {
        const statsResponse = await fetchData(`/doctor/getstats/${doctorId}`);
        console.log("üìä Stats data response:", statsResponse);

        if (statsResponse && statsResponse.success && statsResponse.data) {
          setDoctorStats((prev) => ({
            ...prev,
            ...statsResponse.data,
          }));
        } else if (statsResponse) {
          // Handle case where response doesn't have success flag but has data
          setDoctorStats((prev) => ({
            ...prev,
            ...statsResponse,
          }));
        }
      } catch (statsError) {
        console.warn("Failed to load doctor statistics:", statsError);
        // Don't throw error, just use default stats
      }
    } catch (error) {
      console.error("Error fetching doctor details:", error);
      toast.error("Failed to load doctor information");
      navigate("/doctors");
    } finally {
      dispatch(setLoading(false));
    }
  };

  useEffect(() => {
    if (doctorId) {
      fetchDoctorDetails();
    }
  }, [doctorId]);

  /**
   * Handles opening appointment booking modal
   */
  const handleBookAppointment = () => {
    setModalOpen(true);
  };

  if (loading) {
    return (
      <>
        <Navbar />
        <Loading />
        <Footer />
      </>
    );
  }

  if (!doctor) {
    return (
      <>
        <Navbar />
        <div className="container">
          <div className="error-message">
            <h2>Doctor not found</h2>
            <p>The doctor profile you're looking for doesn't exist.</p>
            <button className="btn" onClick={() => navigate("/doctors")}>
              Back to Doctors
            </button>
          </div>
        </div>
        <Footer />
      </>
    );
  }

  const {
    user: doctorUser,
    specializations,
    experience,
    fees,
    timing,
  } = doctor;
  const { firstname, lastname, email, mobile, pic, address, gender } =
    doctorUser || {};

  const defaultProfileImg =
    "https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg";

  // Get specialization names with null checks
  const getSpecializationNames = () => {
    if (
      specializations &&
      Array.isArray(specializations) &&
      specializations.length > 0
    ) {
      return specializations.map((spec) => spec.name).join(", ");
    }
    return doctor.specialization || "Kh√¥ng x√°c ƒë·ªãnh";
  };

  // Safe rating calculation with fallback
  const safeRating = doctorStats?.rating || 0;
  const safeTotalAppointments = doctorStats?.totalAppointments || 0;
  const safeCompletedAppointments = doctorStats?.completedAppointments || 0;

  return (
    <>
      <Navbar />
      <main className="doctor-profile-page">
        <div className="container">
          {/* Hero Section */}
          <section className="doctor-hero">
            <div className="doctor-hero-content">
              <div className="doctor-avatar">
                <img
                  src={pic || defaultProfileImg}
                  alt={`Dr. ${firstname} ${lastname}`}
                  className="doctor-profile-pic"
                />
                <div className="doctor-status online">
                  <span className="status-indicator"></span>
                  S·∫µn s√†ng
                </div>
              </div>

              <div className="doctor-basic-info">
                <h1 className="doctor-name">
                  Dr. {firstname} {lastname}
                </h1>
                <p className="doctor-specialization">
                  {getSpecializationNames()}
                </p>
                <div className="doctor-rating">
                  <div className="rating-stars">
                    {[...Array(5)].map((_, i) => (
                      <span
                        key={i}
                        className={`star ${
                          i < Math.floor(safeRating) ? "filled" : ""
                        }`}
                      >
                        ‚òÖ
                      </span>
                    ))}
                  </div>
                  <span className="rating-text">
                    {safeRating.toFixed(1)} ({safeTotalAppointments} reviews)
                  </span>
                </div>

                <div className="doctor-quick-stats">
                  <div className="stat-item">
                    <span className="stat-number">{experience || 0}</span>
                    <span className="stat-label">S·ªë nƒÉm kinh nghi·ªám</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-number">{safeTotalAppointments}</span>
                    <span className="stat-label">T·ªïng s·ªë b·ªánh nh√¢n</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-number">
                      {safeCompletedAppointments}
                    </span>
                    <span className="stat-label">ƒê√£ ho√†n th√†nh</span>
                  </div>
                </div>
              </div>

              <div className="doctor-actions">
                <button
                  className="btn btn-primary book-appointment-btn"
                  onClick={handleBookAppointment}
                >
                  ƒê·∫∑t l·ªãch h·∫πn
                </button>
                <div className="consultation-fee">
                  <span className="fee-label">Ph√≠ t∆∞ v·∫•n</span>
                  <span className="fee-amount">{fees || 0} VNƒê</span>
                </div>
              </div>
            </div>
          </section>

          {/* Doctor Details */}
          <section className="doctor-details">
            <div className="details-grid">
              {/* About Section */}
              <div className="detail-card about-card">
                <h3 className="card-title">
                  V·ªÅ b√°c sƒ© {firstname} {lastname}
                </h3>
                <div className="about-content">
                  <p className="doctor-description">
                    B√°c sƒ© {firstname} {lastname} l√† m·ªôt chuy√™n gia{" "}
                    {getSpecializationNames().toLowerCase()}
                    v·ªõi {experience || 0} nƒÉm kinh nghi·ªám th·ª±c h√†nh. Cam k·∫øt
                    cung c·∫•p d·ªãch v·ª• chƒÉm s√≥c b·ªánh nh√¢n xu·∫•t s·∫Øc v√† lu√¥n c·∫≠p
                    nh·∫≠t v·ªõi nh·ªØng ti·∫øn b·ªô y h·ªçc m·ªõi nh·∫•t.
                  </p>

                  <div className="professional-info">
                    {/* <div className="info-row">
                      <span className="info-label">Chuy√™n khoa:</span>
                      <span className="info-value">
                        {getSpecializationNames()}
                      </span>
                    </div> */}
                    <div className="info-row">
                      <span className="info-label">Kinh nghi·ªám:</span>
                      <span className="info-value">{experience || 0} nƒÉm</span>
                    </div>
                    <div className="info-row">
                      <span className="info-label">Gi·ªõi t√≠nh:</span>
                      <span className="info-value">
                        {gender || "Ch∆∞a x√°c ƒë·ªãnh"}
                      </span>
                    </div>
                    <div className="info-row">
                      <span className="info-label">Gi·ªù l√†m vi·ªác:</span>
                      <span className="info-value">
                        T·ª´ T2 - T7
                        {/* {timing || "Ch∆∞a x√°c ƒë·ªãnh"} */}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Specializations Card */}
              <div className="detail-card specializations-card">
                <h3 className="card-title">Chuy√™n khoa</h3>
                <div className="specializations-content">
                  {specializations &&
                  Array.isArray(specializations) &&
                  specializations.length > 0 ? (
                    <div className="specializations-list">
                      {specializations.map((spec, index) => (
                        <div
                          key={spec.id || index}
                          className="specialization-item"
                        >
                          <div className="spec-icon">üè•</div>
                          <div className="spec-details">
                            <h4 className="spec-name">{spec.name}</h4>
                            <p className="spec-description">
                              Chuy√™n gia trong lƒ©nh v·ª±c{" "}
                              {spec.name.toLowerCase()}
                            </p>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : doctor.specialization ? (
                    <div className="specializations-list">
                      <div className="specialization-item">
                        <div className="spec-icon">üè•</div>
                        <div className="spec-details">
                          <h4 className="spec-name">{doctor.specialization}</h4>
                          <p className="spec-description">
                            Chuy√™n gia trong lƒ©nh v·ª±c{" "}
                            {doctor.specialization.toLowerCase()}
                          </p>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="no-specializations">
                      <p>Ch∆∞a c√≥ th√¥ng tin chuy√™n khoa</p>
                    </div>
                  )}
                </div>
              </div>

              {/* Contact Information */}
              <div className="detail-card contact-card">
                <h3 className="card-title">Th√¥ng tin li√™n h·ªá</h3>
                <div className="contact-content">
                  <div className="contact-item">
                    <div className="contact-icon">üìß</div>
                    <div className="contact-details">
                      <span className="contact-label">Email</span>
                      <span className="contact-value">
                        {email || "Kh√¥ng c√≥ s·∫µn"}
                      </span>
                    </div>
                  </div>

                  <div className="contact-item">
                    <div className="contact-icon">üì±</div>
                    <div className="contact-details">
                      <span className="contact-label">ƒêi·ªán tho·∫°i</span>
                      <span className="contact-value">
                        {mobile || "Kh√¥ng c√≥ s·∫µn"}
                      </span>
                    </div>
                  </div>

                  <div className="contact-item">
                    <div className="contact-icon">üìç</div>
                    <div className="contact-details">
                      <span className="contact-label">ƒê·ªãa ch·ªâ</span>
                      <span className="contact-value">
                        {address || "Kh√¥ng c√≥ s·∫µn"}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Availability */}
              {/* <div className="detail-card availability-card">
                <h3 className="card-title">L·ªãch l√†m vi·ªác</h3>
                <div className="availability-content">
                  <div className="time-slots">
                    <div className="time-slot available">
                      <span className="slot-time">9:00 AM - 12:00 PM</span>
                      <span className="slot-status">C√≥ s·∫µn</span>
                    </div>
                    <div className="time-slot available">
                      <span className="slot-time">2:00 PM - 6:00 PM</span>
                      <span className="slot-status">C√≥ s·∫µn</span>
                    </div>
                    <div className="time-slot unavailable">
                      <span className="slot-time">6:00 PM - 8:00 PM</span>
                      <span className="slot-status">ƒê√£ ƒë·∫∑t</span>
                    </div>
                  </div>

                  <div className="availability-note">
                    <p>
                      * Th·ªùi gian h·∫πn c√≥ th·ªÉ thay ƒë·ªïi. Vui l√≤ng ƒë·∫∑t l·ªãch ƒë·ªÉ x√°c
                      nh·∫≠n.
                    </p>
                  </div>
                </div>
              </div> */}

              {/* Services */}
              <div className="detail-card services-card">
                <h3 className="card-title">D·ªãch v·ª• cung c·∫•p</h3>
                <div className="services-content">
                  <div className="services-list">
                    <div className="service-item">
                      <span className="service-icon">ü©∫</span>
                      <span className="service-name">T∆∞ v·∫•n t·ªïng qu√°t</span>
                    </div>
                    <div className="service-item">
                      <span className="service-icon">üî¨</span>
                      <span className="service-name">D·ªãch v·ª• ch·∫©n ƒëo√°n</span>
                    </div>
                    <div className="service-item">
                      <span className="service-icon">üíä</span>
                      <span className="service-name">
                        L·∫≠p k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã
                      </span>
                    </div>
                    <div className="service-item">
                      <span className="service-icon">üìã</span>
                      <span className="service-name">ChƒÉm s√≥c theo d√µi</span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Statistics Card */}
              <div className="detail-card stats-card">
                <h3 className="card-title">Th·ªëng k√™</h3>
                <div className="stats-content">
                  <div className="stat-row">
                    <span className="stat-label">T·ªïng cu·ªôc h·∫πn:</span>
                    <span className="stat-value">{safeTotalAppointments}</span>
                  </div>
                  <div className="stat-row">
                    <span className="stat-label">ƒê√£ ho√†n th√†nh:</span>
                    <span className="stat-value">
                      {safeCompletedAppointments}
                    </span>
                  </div>
                  <div className="stat-row">
                    <span className="stat-label">ƒêang ch·ªù:</span>
                    <span className="stat-value">
                      {doctorStats?.pendingAppointments || 0}
                    </span>
                  </div>
                  <div className="stat-row">
                    <span className="stat-label">T·ª∑ l·ªá ho√†n th√†nh:</span>
                    <span className="stat-value">
                      {doctorStats?.completionRate || 0}%
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </section>

          {/* Call to Action */}
          <section className="doctor-cta">
            <div className="cta-content">
              <h2>S·∫µn s√†ng ƒë·∫∑t l·ªãch h·∫πn?</h2>
              <p>
                Nh·∫≠n ƒë∆∞·ª£c s·ª± chƒÉm s√≥c b·∫°n c·∫ßn t·ª´ b√°c sƒ© {firstname} {lastname}
              </p>
              <button
                className="btn btn-primary btn-large"
                onClick={handleBookAppointment}
              >
                ƒê·∫∑t l·ªãch h·∫πn ngay
              </button>
            </div>
          </section>
        </div>
      </main>

      <Footer />

      {/* Appointment Booking Modal */}
      {modalOpen && (
        <BookAppointment setModalOpen={setModalOpen} ele={doctor} />
      )}
    </>
  );
};

export default DoctorProfile;
